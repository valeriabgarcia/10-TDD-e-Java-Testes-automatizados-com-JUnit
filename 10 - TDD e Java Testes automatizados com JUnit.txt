https://cursos.alura.com.br/formacao-java
https://cursos.alura.com.br/course/tdd-java-testes-automatizados-junit


1 - TESTES AUTOMATIZADOS 
O que são testes automatizados;
	Garantem que o código da aplicação atende corretamente aos requisitos de negócio.
	Facilitam a manutenção do software.
A importância de se escrever testes automatizados em uma aplicação;
Como escrever um teste automatizado utilizando uma classe Java com o método main.


2 - JUNIT
A história do JUnit;
Como adicionar o JUnit ao projeto;
Como escrever um teste automatizado com JUnit;
Como executar os testes com JUnit e analisar o resultado da execução.
Uma das facilidades do JUnit é avaliar se os testes estão passando ou falhando.
	o JUnit nos fornece esse feedback Via relatório exibido na IDE, como por exemplo a view JUnit no Eclipse
Criar um arqivo de testes:
	-> botão direito no arquivo .java a ser testado -> New -> Other -> JUnit Test Case

3 - TDD: TEST-DRIVEN DEVELOPMENT
O que é o TDD;
Como escrever uma funcionalidade via TDD;
Como realizar uma refatoração no código;
As vantagens de escrever os testes antes da implementação.
	TDD ajuda a manter o foco durante a implementação de uma funcionalidade.
	A funcionalidade implementada já sai coberta por testes.
Uma das etapas do TDD é chamada de refatoração
	A refatoração nos ajuda a manter a qualidade do código, algo extremamente importante para a manutenção de uma aplicação


4 - LIDANDO COM EXCEPTIONS
Como testar métodos que podem lançar exceptions;
As abordagens para testar um método que lança uma exception.
	Utilizando o método assertThrows

5 - MAIS RECURSOS
Como testar métodos privados
	se o método é privado, ele já estará sendo testado em outras classes em outros métodos publicos
O que testar na aplicação 
	Apenas as classes que possuem regras de negócio e que possivelmente sofrerão bastante modificações.
Como organizar o código de uma classe de teste
A utilizar as anotacoes @BeforeEach, @AfterEach, @BeforeAll e @AfterAll do JUnit
